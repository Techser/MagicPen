#pragma checksum "C:\Users\admin\Documents\GitHub\UWPSDK\SampleApp\MainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "8CD99F3247CF88F7DB01371BD60D2D91"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampleApp
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::SampleApp.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.StackPanel obj2;
            private global::Windows.UI.Xaml.Controls.StackPanel obj3;
            private global::Windows.UI.Xaml.Controls.TextBox obj8;
            private global::Windows.UI.Xaml.Controls.TextBox obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBox obj13;
            private global::Windows.UI.Xaml.Controls.TextBlock obj14;
            private global::Windows.UI.Xaml.Controls.TextBox obj15;
            private global::Windows.UI.Xaml.Controls.ComboBox obj30;
            private global::Windows.UI.Xaml.Controls.TextBox obj40;
            private global::Windows.UI.Xaml.Controls.TextBox obj42;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // MainPage.xaml line 52
                        this.obj2 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 3: // MainPage.xaml line 76
                        this.obj3 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 8: // MainPage.xaml line 245
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        break;
                    case 11: // MainPage.xaml line 220
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        break;
                    case 12: // MainPage.xaml line 234
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 13: // MainPage.xaml line 235
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_13(this.obj13);
                        break;
                    case 14: // MainPage.xaml line 236
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 15: // MainPage.xaml line 237
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_15(this.obj15);
                        break;
                    case 30: // MainPage.xaml line 158
                        this.obj30 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 40: // MainPage.xaml line 83
                        this.obj40 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        break;
                    case 42: // MainPage.xaml line 72
                        this.obj42 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        break;
                    default:
                        break;
                }
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::SampleApp.MainPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SampleApp.MainPage obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CurrentStatus(obj.CurrentStatus, phase);
                        this.Update_TestConsole(obj.TestConsole, phase);
                        this.Update_OutputConsole(obj.OutputConsole, phase);
                        this.Update_ProfileKeyVisibility(obj.ProfileKeyVisibility, phase);
                        this.Update_ProfileKey(obj.ProfileKey, phase);
                        this.Update_ProfileValueVisibility(obj.ProfileValueVisibility, phase);
                        this.Update_ProfileValue(obj.ProfileValue, phase);
                        this.Update_colors(obj.colors, phase);
                        this.Update_CurrentMacAddress(obj.CurrentMacAddress, phase);
                    }
                }
            }
            private void Update_CurrentStatus(global::SampleApp.MainPage.AppStatus obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 52
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj2, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("EnumToVisiblityVisible").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), "Disconnected", null));
                    // MainPage.xaml line 76
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("EnumToVisiblityVisible").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), "Connected", null));
                }
            }
            private void Update_TestConsole(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 245
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj8, obj, null);
                }
            }
            private void Update_OutputConsole(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 220
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj11, obj, null);
                }
            }
            private void Update_ProfileKeyVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 234
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, obj);
                    // MainPage.xaml line 235
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj13, obj);
                }
            }
            private void Update_ProfileKey(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 235
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj13, obj, null);
                }
            }
            private void Update_ProfileValueVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 236
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj14, obj);
                    // MainPage.xaml line 237
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj15, obj);
                }
            }
            private void Update_ProfileValue(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 237
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj15, obj, null);
                }
            }
            private void Update_colors(global::System.Collections.ObjectModel.ObservableCollection<global::SampleApp.NColor> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_colors(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 158
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj30, obj, null);
                }
            }
            private void Update_CurrentMacAddress(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 83
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj40, obj, null);
                    // MainPage.xaml line 72
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj42, obj, null);
                }
            }
            private void UpdateTwoWay_13_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ProfileKey = this.obj13.Text;
                }
            }
            private void UpdateTwoWay_15_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ProfileValue = this.obj15.Text;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainPage_obj1_Bindings> weakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public MainPage_obj1_Bindings TryGetBindingObject()
                {
                    MainPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_colors(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::SampleApp.MainPage obj = sender as global::SampleApp.MainPage;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_CurrentStatus(obj.CurrentStatus, DATA_CHANGED);
                                bindings.Update_TestConsole(obj.TestConsole, DATA_CHANGED);
                                bindings.Update_OutputConsole(obj.OutputConsole, DATA_CHANGED);
                                bindings.Update_ProfileKeyVisibility(obj.ProfileKeyVisibility, DATA_CHANGED);
                                bindings.Update_ProfileKey(obj.ProfileKey, DATA_CHANGED);
                                bindings.Update_ProfileValueVisibility(obj.ProfileValueVisibility, DATA_CHANGED);
                                bindings.Update_ProfileValue(obj.ProfileValue, DATA_CHANGED);
                                bindings.Update_colors(obj.colors, DATA_CHANGED);
                                bindings.Update_CurrentMacAddress(obj.CurrentMacAddress, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CurrentStatus":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CurrentStatus(obj.CurrentStatus, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TestConsole":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TestConsole(obj.TestConsole, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OutputConsole":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OutputConsole(obj.OutputConsole, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ProfileKeyVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ProfileKeyVisibility(obj.ProfileKeyVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ProfileKey":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ProfileKey(obj.ProfileKey, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ProfileValueVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ProfileValueVisibility(obj.ProfileValueVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ProfileValue":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ProfileValue(obj.ProfileValue, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "colors":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_colors(obj.colors, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentMacAddress":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CurrentMacAddress(obj.CurrentMacAddress, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::SampleApp.MainPage obj)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_colors(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SampleApp.NColor> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SampleApp.NColor>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_colors(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SampleApp.NColor> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SampleApp.NColor>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SampleApp.NColor> cache_colors = null;
                public void UpdateChildListeners_colors(global::System.Collections.ObjectModel.ObservableCollection<global::SampleApp.NColor> obj)
                {
                    if (obj != cache_colors)
                    {
                        if (cache_colors != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_colors).PropertyChanged -= PropertyChanged_colors;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_colors).CollectionChanged -= CollectionChanged_colors;
                            cache_colors = null;
                        }
                        if (obj != null)
                        {
                            cache_colors = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_colors;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_colors;
                        }
                    }
                }
                public void RegisterTwoWayListener_13(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_13_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_15(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_Text();
                        }
                    };
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // MainPage.xaml line 1
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)(target);
                    ((global::Windows.UI.Xaml.Controls.Page)element1).Loaded += this.Page_Loaded;
                }
                break;
            case 4: // MainPage.xaml line 269
                {
                    this.drawableCanvas = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)(target);
                    ((global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)this.drawableCanvas).Draw += this.drawableCanvas_Draw;
                    ((global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)this.drawableCanvas).CreateResources += this.drawableCanvas_CreateResources;
                    ((global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)this.drawableCanvas).SizeChanged += this.drawableCanvas_SizeChanged;
                }
                break;
            case 5: // MainPage.xaml line 278
                {
                    this.PaperInfo = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 6: // MainPage.xaml line 279
                {
                    this.cbPaperInfo = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.cbPaperInfo).SelectionChanged += this.cbPaperInfo_SelectionChanged;
                }
                break;
            case 7: // MainPage.xaml line 280
                {
                    this.btnClear = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.btnClear).Click += this.btnClear_Click;
                }
                break;
            case 8: // MainPage.xaml line 245
                {
                    this.txtTestOutput = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBox)this.txtTestOutput).TextChanged += this.txtPenProfileOutput_TextChanged;
                }
                break;
            case 9: // MainPage.xaml line 258
                {
                    global::Windows.UI.Xaml.Controls.Button element9 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)element9).Click += this.ButtonPenStatusTest_Click;
                }
                break;
            case 10: // MainPage.xaml line 260
                {
                    global::Windows.UI.Xaml.Controls.Button element10 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)element10).Click += this.ButtonPenProfileTest_Click;
                }
                break;
            case 11: // MainPage.xaml line 220
                {
                    this.txtPenProfileOutput = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBox)this.txtPenProfileOutput).TextChanged += this.txtPenProfileOutput_TextChanged;
                }
                break;
            case 16: // MainPage.xaml line 238
                {
                    global::Windows.UI.Xaml.Controls.Button element16 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)element16).Click += this.ButtonProfileExecute_Click;
                }
                break;
            case 17: // MainPage.xaml line 228
                {
                    this.cbPenProfileType = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.cbPenProfileType).SelectionChanged += this.cbPenProfileType_SelectionChanged;
                }
                break;
            case 18: // MainPage.xaml line 207
                {
                    this.txtFirmwareVersion = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 19: // MainPage.xaml line 208
                {
                    this.btnFirmwareUpdate = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.btnFirmwareUpdate).Click += this.btnFirmwareUpdate_Click;
                }
                break;
            case 20: // MainPage.xaml line 198
                {
                    this.txtFirmwareFile = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBox)this.txtFirmwareFile).GotFocus += this.txtFirmwareFile_GotFocus;
                }
                break;
            case 21: // MainPage.xaml line 187
                {
                    this.txtOldPassword = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 22: // MainPage.xaml line 188
                {
                    this.txtNewPassword = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 23: // MainPage.xaml line 189
                {
                    this.btnSubmitPassword = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.btnSubmitPassword).Click += this.btnSubmitPassword_Click;
                }
                break;
            case 24: // MainPage.xaml line 169
                {
                    this.cbPenCapPowerControl = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                    ((global::Windows.UI.Xaml.Controls.CheckBox)this.cbPenCapPowerControl).Checked += this.cbControl_Checked;
                    ((global::Windows.UI.Xaml.Controls.CheckBox)this.cbPenCapPowerControl).Unchecked += this.cbControl_Unchecked;
                }
                break;
            case 25: // MainPage.xaml line 170
                {
                    this.cbPowerOnByPenTip = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                    ((global::Windows.UI.Xaml.Controls.CheckBox)this.cbPowerOnByPenTip).Checked += this.cbControl_Checked;
                    ((global::Windows.UI.Xaml.Controls.CheckBox)this.cbPowerOnByPenTip).Unchecked += this.cbControl_Unchecked;
                }
                break;
            case 26: // MainPage.xaml line 171
                {
                    this.cbBeepSound = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                    ((global::Windows.UI.Xaml.Controls.CheckBox)this.cbBeepSound).Checked += this.cbControl_Checked;
                    ((global::Windows.UI.Xaml.Controls.CheckBox)this.cbBeepSound).Unchecked += this.cbControl_Unchecked;
                }
                break;
            case 27: // MainPage.xaml line 172
                {
                    this.cbOfflineData = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                    ((global::Windows.UI.Xaml.Controls.CheckBox)this.cbOfflineData).Checked += this.cbControl_Checked;
                    ((global::Windows.UI.Xaml.Controls.CheckBox)this.cbOfflineData).Unchecked += this.cbControl_Unchecked;
                }
                break;
            case 28: // MainPage.xaml line 143
                {
                    this.cbAutoPoweroffTime = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.cbAutoPoweroffTime).SelectionChanged += this.cbAutoPoweroffTime_SelectionChanged;
                }
                break;
            case 29: // MainPage.xaml line 151
                {
                    this.cbFSRStep = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.cbFSRStep).SelectionChanged += this.cbFSRStep_SelectionChanged;
                }
                break;
            case 30: // MainPage.xaml line 158
                {
                    this.cbColor = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.cbColor).SelectionChanged += this.cbColor_SelectionChanged;
                }
                break;
            case 31: // MainPage.xaml line 166
                {
                    global::Windows.UI.Xaml.Controls.Slider element31 = (global::Windows.UI.Xaml.Controls.Slider)(target);
                    ((global::Windows.UI.Xaml.Controls.Slider)element31).ValueChanged += this.SliderThickness_ValueChanged;
                }
                break;
            case 33: // MainPage.xaml line 126
                {
                    this.pbPower = (global::Windows.UI.Xaml.Controls.ProgressBar)(target);
                }
                break;
            case 34: // MainPage.xaml line 128
                {
                    this.pbStorage = (global::Windows.UI.Xaml.Controls.ProgressBar)(target);
                }
                break;
            case 35: // MainPage.xaml line 105
                {
                    this.textBox = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 36: // MainPage.xaml line 107
                {
                    this.lvOfflineDataList = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 37: // MainPage.xaml line 109
                {
                    this.btnDownload = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.btnDownload).Click += this.btnDownload_Click;
                }
                break;
            case 38: // MainPage.xaml line 110
                {
                    this.btnDelete = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 39: // MainPage.xaml line 93
                {
                    this.txtPenName = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 41: // MainPage.xaml line 84
                {
                    global::Windows.UI.Xaml.Controls.Button element41 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)element41).Click += this.btnDisconnect_Click;
                }
                break;
            case 43: // MainPage.xaml line 73
                {
                    this.btnConnect = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.btnConnect).Click += this.btnConnect_Click;
                }
                break;
            case 44: // MainPage.xaml line 59
                {
                    this.lvDevices = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.lvDevices).SelectionChanged += this.lvDevices_SelectionChanged;
                }
                break;
            case 45: // MainPage.xaml line 62
                {
                    this.btnSearch = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.btnSearch).Click += this.btnSearch_Click;
                }
                break;
            case 46: // MainPage.xaml line 63
                {
                    this.btnSearchPaired = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.btnSearchPaired).Click += this.btnSearchPaired_Click;
                }
                break;
            case 47: // MainPage.xaml line 64
                {
                    this.btnDeletePaired = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.btnDeletePaired).Click += this.btnDeletePaired_Click;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

